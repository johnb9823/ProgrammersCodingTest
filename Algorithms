1. 두 수의 차 구하기
정수 num1과 num2가 주어질 때, num1에서 num2를 뺀 값을 return하도록 soltuion 함수를 완성해주세요.

class Solution {
    public int solution(int num1, int num2) {
        int answer = num1 - num2;
        return answer;
    }
}

2. 두 수의 곱 구하기
정수 num1, num2가 매개변수 주어집니다. num1과 num2를 곱한 값을 return 하도록 solution 함수를 완성해주세요.

class Solution {
    public int solution(int num1, int num2) {
        int answer = num1 * num2;
        return answer;
    }
}

3. 몫 구하기
정수 num1, num2가 매개변수로 주어질 때, num1을 num2로 나눈 몫을 return 하도록 solution 함수를 완성해주세요.

class Solution {
    public int solution(int num1, int num2) {
        
        int answer = num1/num2;
        return answer;
    }
}

4. 나이 출력
머쓱이는 선생님이 몇 년도에 태어났는지 궁금해졌습니다. 2022년 기준 선생님의 나이 age가 주어질 때, 선생님의 출생 연도를 return 하는 solution 함수를 완성해주세요

class Solution {
    public int solution(int age) {
        int year = 2022;
         age -= 1;
        int a = year - age;

        System.out.println("출생년도: " + (year - age));
        return a;
    }
}

5. 숫자 비교하기
정수 num1과 num2가 매개변수로 주어집니다. 두 수가 같으면 1 다르면 -1을 retrun하도록 solution 함수를 완성해주세요.

class Solution {
    public int solution(int num1, int num2) {
        
        if (num1 == num2){
            return 1;
        } else {
            return -1;
        }
        
    }
}

6. 두 수의 합 구하기
정수 num1과 num2가 주어질 때, num1과 num2의 합을 return하도록 soltuion 함수를 완성해주세요.

class Solution {
    public int solution(int num1, int num2) {
        int answer = num1 + num2;
        return answer;
    }
}

7. 두 수의 나눗셈
정수 num1과 num2가 매개변수로 주어질 때, num1을 num2로 나눈 값에 1,000을 곱한 후 정수 부분을 return 하도록 solution 함수를 완성해주세요.

class Solution {
    public int solution(int num1, int num2) {
        int answer = (int) ((double) num1 / num2 * 1000);
        return answer;
    }
}

8. 각도기
각에서 0도 초과 90도 미만은 예각, 90도는 직각, 90도 초과 180도 미만은 둔각 180도는 평각으로 분류합니다. 각 angle이 매개변수로 주어질 때 예각일 때 1, 직각일 때 2, 둔각일 때 3, 평각일 때 4를 return하도록 solution 함수를 완성해주세요.

예각 : 0 < angle < 90
직각 : angle = 90
둔각 : 90 < angle < 180
평각 : angle = 180

class Solution {
    public int solution(int angle) {
        if (angle > 0 && angle < 90) {
                return 1; 
            } else if (angle == 90) {
                return 2; 
            } else if (angle > 90 && angle < 180) {
                return 3; 
            } else if (angle == 180) {
                return 4; 
            } else {
                return -1; 
            }
        
    }
}

9. 짝수의 합
정수 n이 주어질 때, n이하의 짝수를 모두 더한 값을 return 하도록 solution 함수를 작성해주세요.

class Solution {
    public int solution(int n) {
    
        int sum = 0;
        for (int i = 2; i <= n; i += 2) {
            sum += i;
        }
        
    
        return sum;
    }
}

10. 배열의 평균값
정수 배열 numbers가 매개변수로 주어집니다. numbers의 원소의 평균값을 return하도록 solution 함수를 완성해주세요.

class Solution {
    public double solution(int[] numbers) {
        int sum = 0;
        for (int i = 0; i < numbers.length; i++){
            sum += numbers[i];
        }
        
        double answer = (double)sum / numbers.length;
        return answer;
    }
}

11. 짝수와 홀수
정수 num이 짝수일 경우 "Even"을 반환하고 홀수인 경우 "Odd"를 반환하는 함수, solution을 완성해주세요.

class Solution {
    public String solution(int num) {
        if(num % 2 == 0 ) {
            return "Even";
        } else {
            return "Odd";
        }
        
    }
}

12. 평균 구하기
정수를 담고 있는 배열 arr의 평균값을 return하는 함수, solution을 완성해보세요.

class Solution {
    public double solution(int[] arr) {
        double sum = 0;
        for(int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        double answer = sum / arr.length;
        return answer;
    }
}

13. 자릿수 더하기
자연수 N이 주어지면, N의 각 자릿수의 합을 구해서 return 하는 solution 함수를 만들어 주세요.
예를들어 N = 123이면 1 + 2 + 3 = 6을 return 하면 됩니다.

import java.util.*;

public class Solution {
    public int solution(int n) {
        int answer = 0;
        while(n > 0) {
            answer += n % 10;
            n = n / 10; 
        }

        return answer;
    }
}

14. 약수의 합
정수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요.

class Solution {
    public int solution(int n) {
        int sum = 0;
        for(int i = 1; i <= n; i++) {
            if(n % i == 0) {
                sum += i;
            }
        }
        int answer = sum;
        return answer;
    }
}

15. 나머지가 1이 되는 수 찾기
자연수 n이 매개변수로 주어집니다. n을 x로 나눈 나머지가 1이 되도록 하는 가장 작은 자연수 x를 return 하도록 solution 함수를 완성해주세요. 답이 항상 존재함은 증명될 수 있습니다.

class Solution {
    public int solution(int n) {
        int answer = 0;
        for(int i = 1; i < n; i++){
            if(n % i == 1){
                answer = i;
                break;
            }
        }
        return answer;
    }
}

16. x만큼 간격이 있는 n개의 숫자
함수 solution은 정수 x와 자연수 n을 입력 받아, x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트를 리턴해야 합니다. 
다음 제한 조건을 보고, 조건을 만족하는 함수, solution을 완성해주세요.

class Solution {
    public long[] solution(int x, int n) {
        long[] answer = new long[n]; 

        for (int i = 0; i < n; i++) {
            answer[i] = (long) x * (i + 1); 
        }
        return answer;  
    }
}

17. 자연수 뒤집어 배열로 만들기
자연수 n을 뒤집어 각 자리 숫자를 원소로 가지는 배열 형태로 리턴해주세요. 예를들어 n이 12345이면 [5,4,3,2,1]을 리턴합니다.

class Solution {
    public int[] solution(long n) {
        // 1. 숫자 n을 문자열로 변환
        String str = String.valueOf(n);
        
        // 2. 문자열을 뒤집기
        StringBuilder reversedStr = new StringBuilder(str);
        reversedStr.reverse();
        
        // 3. 뒤집은 문자열을 숫자 배열로 변환
        int[] answer = new int[reversedStr.length()];
        
        for (int i = 0; i < reversedStr.length(); i++) {
            answer[i] = reversedStr.charAt(i) - '0';  // 문자 -> 숫자 변환
        }
        
        return answer;
    }
}

18. 문자열을 정수로 바꾸기
문제 설명
문자열 s를 숫자로 변환한 결과를 반환하는 함수, solution을 완성하세요.

제한 조건
s의 길이는 1 이상 5이하입니다.
s의 맨앞에는 부호(+, -)가 올 수 있습니다.
s는 부호와 숫자로만 이루어져있습니다.
s는 "0"으로 시작하지 않습니다.

class Solution {
    public int solution(String s) {
        int answer = Integer.parseInt(s);
        return answer;
    }
}

19. 정수 제곱근 판별
임의의 양의 정수 n에 대해, n이 어떤 양의 정수 x의 제곱인지 아닌지 판단하려 합니다.
n이 양의 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 양의 정수 x의 제곱이 아니라면 -1을 리턴하는 함수를 완성하세요.

class Solution {
    public long solution(long n) {
        // n의 제곱근을 구하고, 그 값이 정수인지 확인
        long x = (long) Math.sqrt(n);
        
        // n이 x의 제곱이라면
        if (x * x == n) {
            // (x + 1)의 제곱을 반환
            return (x + 1) * (x + 1);
        } else {
            // 제곱수가 아니라면 -1 반환
            return -1;
        }
    }
}

20. 정수 내림차순으로 배치하기
함수 solution은 정수 n을 매개변수로 입력받습니다. n의 각 자릿수를 큰것부터 작은 순으로 정렬한 새로운 정수를 리턴해주세요. 예를들어 n이 118372면 873211을 리턴하면 됩니다.

import java.util.Arrays;

class Solution {
    public long solution(long n) {
        String[] list = String.valueOf(n).split("");
        Arrays.sort(list);
 
        StringBuilder sb = new StringBuilder();
        for (String aList : list) sb.append(aList);
 
        return Long.parseLong(sb.reverse().toString());
    }
}
